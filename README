PACKAGE

package suba
    import "github.com/dagoof/suba"

    Package suba - short for SUBcommand Argument parser - provides basic
    components useful in assembling a command line argument parser that uses
    a git-style subcommand based hierarchy of functions

VARIABLES

var INVALID_A error = errors.New("Invalid argument count")
var INVALID_R error = errors.New("Invalid function result")


FUNCTIONS

func Run(h Handler) error
    Run a handler on default command line args


TYPES

type HContainer struct{ F HF }
    Simple container for HFs to allow for interface implementation

func (c HContainer) Accept(args ...string) (e error)
    Does the heavy lifting of allowing any function which accepts strings
    and returns an error to be a valid handler function, using the magic of
    reflection

type HF interface{}
    Shorthand for `handler function`. Although this is defined by an empty
    interface, any function which handles user input must accept some number
    of strings as arguments and return an error (which is then typically
    displayed to stdout)

type Handler interface {
    Accept(...string) error
}

type Many map[int]HF
    Helper type that allows for function switching based on argument length
    count Useful for commands with optional arguments such as something like
    `git push`

func (m Many) Accept(args ...string) error

type Route struct{ Routes map[string]Handler }

func NewRoute() Route
    Create an empty route

func (r Route) Accept(args ...string) error
    Method implementing `handler` interface by delegating to handler
    function or sub-handler

func (r Route) Add(s string, f HF)
    Handle the given command with a handler function

func (r Route) Options() []string
    Returns the list of available commands for the given handler

func (r Route) Sub(s string, h Handler)
    Handle the given command with a sub-handler


